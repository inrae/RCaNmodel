% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{shiftPolytope}
\alias{shiftPolytope}
\title{shiftPolytope
shift a polytope and saves into to undo the transformation}
\usage{
shiftPolytope(A, b, N, p, T, trans, shift)
}
\arguments{
\item{A}{a matrix of coefficients of inequality constants A.x<=b}

\item{b}{a vector of length equals to nrow(A)}

\item{N}{the matrix storing the total transformation 
(including current and previous transformations)}

\item{p}{the vector storing the total shift
(including current and previous transformations)}

\item{T}{a matrix}

\item{trans}{matrix of transformation to be applied}

\item{shift}{vector of shift to be applied}
}
\description{
shiftPolytope
shift a polytope and saves into to undo the transformation
}
\section{Details}{

The CHRR algorithm is a C++ translation of cobratoolbox code written
by Yin Zhang licensed under GNU GPL-3 https://github.com/opencobra/cobratoolbox/ 
and of matlab code written by Ben Cousins 
(https://github.com/Bounciness/Volume-and-Sampling) is a C++ translation of
matlab functions provided in the opencobra toolbox and 
in this github repository % `m x n` sparse matrix `A`.

shift the polytope by a point and apply a transformation, while retaining
the information to undo the transformation later (to recover the samples)
let x denote the original space, y the current space, and z the new space
we have

  P.A y <= P.b   and x = N*y+p

 applying the transformation

  trans * z + shift = y

yields the system

 x = (N * trans) * z + N*shift + p
 (P.A * trans) * z <= P.b - P.A * shift
}

