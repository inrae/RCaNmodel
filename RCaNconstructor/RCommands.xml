<?xml version="1.0" encoding="UTF-8"?>

<!-- une commande R donne lieu a un noeud rcommand avec les champs -->
<!-- id : un identifiant simple -->
<!-- textmenu : ce qui apparaîtra dans le menu -->
<!-- submenu : dans quel menu du menu principal cela apparaîtra -->
<!-- condition : ce qui la rend possible; en l'état actuel : connected, built, sampled  -->
<!-- context change : ce que la command change si elle s'éxécute correctement;  en l'état actuel : connected, built, sampled -->
<!-- rcompute : une suite de commandes R (n'est pas obligatoire lorsqu'il s'agit de produire un plot)-->
<!-- rplots : une suite de commandes R pour construire un plot (n'est pas obligatoire, par exemple pour connect, build ou sample)-->
<!-- help : le texte qui s'affiche si l'utilisateur choisit help, commande interpretation, cette commande-->
<!-- dans le texte d'une formule, la présence en majuscule d'un des mots clé suivants -->
<!-- FILENAME sera remplace par le nom du fichier .xlsx -->
<!-- POLYTOPE et SAMPLE sont les noms du polytope et de l'échanntillon en cours -->
<!-- SIZE, NCHAIN, THIN, YEAR, YEARS, FLUX, FLUXES, COMPONENT, COMPONENTS, FLUXESCOMPONENTS, TWOFLUXESONEYEAR, -->
<!-- sont les parametres des functions -->
<!-- un dialogue apparait pour permettre de les définir -->
<!-- syntaxe xml : dans tout le texte le signe '<-' est remplacé par '&lt;-'    -->

<rcommands>
    <rcommand>
        <id>
            connect
        </id>
        <submenu>
            general
        </submenu>
        <textmenu>
            Start R session and load libraries
        </textmenu>
        <contextchange>
            connected
        </contextchange>
        <rcompute>
            require(ggplot2)
            require(ggraph)
            library(coda)
            library(RCaN)
            library(dplyr)
            library(tidyverse)
            library(GGally)
            resultR &lt;- 'R session is started'
        </rcompute>
        <help>
            This command starts a R session and loads all necessary libraries
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            build
        </id>
        <submenu>
            polytope
        </submenu>
        <textmenu>
            Build polytope
        </textmenu>
        <condition>
            connected
        </condition>
        <contextchange>
            built
        </contextchange>
        <rcompute>
            POLYTOPE &lt;- buildCaN('FILENAME')
            resultR &lt;- 'Polytope is built'
        </rcompute>
        <help>
            This command builds the polytope.
            It transforms constraints into linear equalities and inequalities.
            It gives an R object named SAMPLE.
            According to the number of trophic fluxes and the number of time steps, it may last some minutes.
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            plotPolytope
        </id>
        <textmenu>
            Plot polytope
        </textmenu>
        <submenu>
            polytope
        </submenu>
        <condition>
            built
        </condition>
        <rplots>
            plotPolytope2D(POLYTOPE, c(FLUXES))
        </rplots>
        <help>
            This command gives a the plot of the polytope acording to the ... representation.
            Documentation is given in ...
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            diagnosticPolytope
        </id>
        <textmenu>
            Diagnostic polytope
        </textmenu>
        <submenu>
            polytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            resultR &lt;-  checkPolytopeStatus(POLYTOPE)
        </rcompute>
        <help>
            Let n be the number of trophic flows. Let t be the number of time steps.
            The set of constraints define a convex subset of a n t-dimensional space.
            This subset is a convex polytope. Constraints correspond to faces of this polytope.
            Each point inside the polytope corresponds to a possible trajectory of the trophic system.
            The idea of Chance and Necessity model is to uniformly sample within such a polytope.
            This corresponds to explore the whole space of possible trajectories.
            Nevertheless, the polytope should not be empty (otherwise, there is no solution) and  should be bounded (otherwise there could be infinite flows).
            This commands allows check that the polytope is ok,
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            bounds
        </id>
        <textmenu>
            Bounds of polytope
        </textmenu>
        <submenu>
            polytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            resultsR &lt;- getAllBoundsParam(POLYTOPE)
        </rcompute>
        <help>
            If the polytope is not bounded, you should add additional constraints on not bounded parameter. To see which parameter is not bounded, you can use the function getAllBoundsParamCaNmod. An Inf in the upperbound column would correspond to a non bounded parameter, otherwise you have lower and upperbounds of each parameter
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            bound
        </id>
        <textmenu>
            Bound of polytope in one dimension
        </textmenu>
        <submenu>
            polytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            resultsR &lt;- getBoundParam(POLYTOPE, p='FLUX[YEAR]')
        </rcompute>
        <help>
            Since this function can be time consuming, we provide a version that focus on a parameter of interest, here for example the first parameter:
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            incompatible
        </id>
        <textmenu>
            Incompatible constraints
        </textmenu>
        <submenu>
            polytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            resultsR &lt;- findingIncompatibleConstr(POLYTOPE)
        </rcompute>
        <help>
            Finding incompatible constraints.
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            sample
        </id>
        <textmenu>
            Sample polytope
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            built
        </condition>
        <contextchange>
            sampled
        </contextchange>
        <rcompute>
            SAMPLE &lt;- sampleCaN(POLYTOPE, SIZE, nchain = NCHAIN, ncore = 2, thin = THIN)
        </rcompute>
        <help>
            This commands allows sampling the polytope.  The aim of this step is to achieve a uniform sampling within the convex poltyope. To do that, we use the routines from the former cpgsR package. Since the sampling is based on a mcmc algorithm, it can be a good idea to run several independent chains; the library allows you to run several chain in parallel using multicore facility provided by package parallel and doParallel. For example, here is the solution to run 2 chains in parrallel with 1000 samples in each chain:
            They are given by the user.
            Parameters are : SIZE, NCORE, NCHAIN, THIN.
            SIZE is the number of sampled trajectories.
            NCORE allows to use several cores in parallel, however the library ensure that the computation leave one core unused and that the number of cores remain smaller than the number of chains.
            NCHAIN is ...
            THIN ...
            This commands returns an object, named SAMPLE, that contains the model description and a  mcmc.list object so that we can use all the diagnostics tools provided in the package coda, such traceplot, summary or gelman and rubin tests or autocorrelograms.
            According to the number of trophic fluxes and the number of time steps, it may last a lot: some minutes, some tenths of minutes.
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            gelmanDiag
        </id>
        <textmenu>
            Gelman diagnostic
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            gelman.diag(SAMPLE$mcmc[,'FLUX[YEAR]'])
        </rplots>
        <help>
            Gelman diagnostic for a given flux and a given year. Does not work.
        </help>
        <parameters>
            FLUX : one flow
            YEAR : one year
        </parameters>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            autocorrelationPlot
        </id>
        <textmenu>
            Plot autocorrelation of sample
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            acfplot(SAMPLE$mcmc[,'FLUX[YEAR]'])
        </rplots>
        <help>
            Plot autocorrelation in sample for a given flux and a given year.
        </help>
        <parameters>
            FLUX : one flow
            YEAR : one year
        </parameters>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            samplePlotFlux
        </id>
        <textmenu>
            Plot sample flux : one flux
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSeries(SAMPLE,FLUX,TRUE)
        </rplots>
        <help>
            Plot sample for a given flux and a given year.
        </help>
        <parameters>
            FLUX : one flow
            YEAR : one year
        </parameters>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            samplePlotComponents
        </id>
        <textmenu>
            Plot sample biomass : one component
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSeries(SAMPLE,COMPONENT,TRUE)
        </rplots>
        <help>
            Plot sample for a given component and a given year.
        </help>
        <parameters>
            FLUX : one flow
            YEAR : one year
        </parameters>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            sampleMultiple
        </id>
        <textmenu>
            Plot sample : several fluxes or components
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSeries(SAMPLE, c(FLUXESCOMPONENTS),TRUE)
        </rplots>
        <help>
            Plot sample for several fluxes and components
        </help>
        <parameters>
            FLUXESCOMPONENTS : several flows and several components.
        </parameters>

    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            violinBiomassDistributions
        </id>
        <textmenu>
            Violin plots of biomass distributions
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <contextchange>
            plotsPrepared
        </contextchange>
        <rplots>
            ggViolin(SAMPLE,c(COMPONENTS),year=YEAR,TRUE)
        </rplots>
        <help>
            Violin plots of biomass distributions
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            ViolinFluxDistributions
        </id>
        <textmenu>
            Violin plots of flux distributions
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggViolin(SAMPLE,c(FLUXES),year=YEAR,TRUE)
        </rplots>
        <help>
            Violin plots of flux distributions
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            dietFractions
        </id>
        <textmenu>
            Diet fractions
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggDiet(SAMPLE, COMPONENT)
        </rplots>
        <help>
            Diet fractions
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <id>
            growthRatesBiomasses
        </id>
        <textmenu>
            Growth rates vs. biomasses (one component)
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplot>
            ggGrowth(SAMPLE, COMPONENT)
        </rplot>
        <help>
            Plots biomass growth as a function of biomass
        </help>
    </rcommand>    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <id>
            growthRatesBiomassesTC
        </id>
        <textmenu>
            Growth rates vs. biomasses (all components)
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplot>
            ggGrowth(SAMPLE)
        </rplot>
        <help>
            Plots biomass growth as a function of biomass
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <id>
            trophicFunctionalRelationships
        </id>
        <textmenu>
            Trophic functional relationships (all components)
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <contextchange>
            plotsPrepared
        </contextchange>
        <rplots>
            ggTrophicRelation(SAMPLE)
        </rplots>
        <help>
            Plots fluxes from prey to predators
        </help>
    </rcommand>    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <id>
            trophicFunctionalRelationships
        </id>
        <textmenu>
            Trophic functional relationships (one component)
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <contextchange>
            plotsPrepared
        </contextchange>
        <rplots>
            ggTrophicRelation(SAMPLE,COMPONENT)
        </rplots>
        <help>
            Plots fluxes from prey to predators
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            satiation
        </id>
        <textmenu>
            Satiation (one component)
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSatiation(SAMPLE, COMPONENT)
        </rplots>
        <help>
            Plots incoming trophic fluxes versus biomass
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <id>
            satiation
        </id>
        <textmenu>
            Satiation (all components)
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSatiation(SAMPLE)
        </rplots>
        <help>
            Plots satiation
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
</rcommands>
