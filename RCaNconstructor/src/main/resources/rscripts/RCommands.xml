<?xml version="1.0" encoding="UTF-8"?>

<!-- une commande R donne lieu a un noeud rcommand avec les champs -->
<!-- id : un identifiant simple -->
<!-- textmenu : ce qui apparaîtra dans le menu -->
<!-- submenu : dans quel menu du menu principal cela apparaîtra -->
<!-- condition : ce qui la rend possible; en l'état actuel : connected, built, sampled  -->
<!-- context change : ce que la command change si elle s'éxécute correctement;  en l'état actuel : connected, built, sampled -->
<!-- rcompute : une suite de commandes R (n'est pas obligatoire lorsqu'il s'agit de produire un plot)-->
<!-- rplots : une suite de commandes R pour construire un plot (n'est pas obligatoire, par exemple pour connect, build ou sample)-->
<!-- help : le texte qui s'affiche si l'utilisateur choisit help, commande interpretation, cette commande-->
<!-- dans le texte d'une formule, la présence en majuscule d'un des mots clé suivants -->
<!-- FILENAME sera remplace par le nom du fichier .xlsx -->
<!-- POLYTOPE et SAMPLE sont les noms du polytope et de l'échanntillon en cours -->
<!-- SIZE, NCHAIN, THIN, YEAR, YEARS, FLUX, FLUXES, COMPONENT, COMPONENTS, FLUXESCOMPONENTS -->
<!-- sont les parametres des functions -->
<!-- un dialogue apparait pour permettre de les définir -->
<!-- syntaxe xml : dans tout le texte le signe '<-' est remplacé par '&lt;-'    -->

<rcommands>
    <rcommand>
        <name>
            connect
        </name>
        <submenu>
            general
        </submenu>
        <textmenu>
            Start R session and load libraries
        </textmenu>
        <conditioncontextchange>
            R session is started
        </conditioncontextchange>
        <contextchange>
            Libraries loaded
        </contextchange>
        <rcompute>
            require(ggplot2)
            require(ggraph)
            library(coda)
            library(RCaN)
            library(dplyr)
            library(tidyverse)
            library(lubridate)
            library(GGally)
            resultR &lt;- 'R session is started'
        </rcompute>
        <help>
            This command starts a R session and loads all necessary libraries
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            disconnect
        </name>
        <submenu>
            general
        </submenu>
        <textmenu>
            Stop R session
        </textmenu>
        <condition>
            connected
        </condition>
        <help>
            This command stops a R session.
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            build
        </name>
        <submenu>
            polytope
        </submenu>
        <textmenu>
            Build polytope
        </textmenu>
        <condition>
            connected
        </condition>
        <conditioncontextchange>
            Polytope is built - polytope is ok
        </conditioncontextchange>
        <contextchange>
            built
        </contextchange>
        <rcompute>
            POLYTOPE &lt;- buildCaN('FILENAME')
            built &lt;- 'Polytope is built'
            status &lt;-  checkPolytopeStatus(POLYTOPE)
            resultR &lt;-  paste(built, status, sep=" - ")
        </rcompute>
        <help>
            This command builds the polytope.
            It transforms constraints into linear equalities and inequalities.
            It gives an R object named SAMPLE.
            According to the number of trophic fluxes and the number of time steps, it may last some minutes.
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            plotPolytope2D
        </name>
        <textmenu>
            Plot polytope in two selected dimensions
        </textmenu>
        <submenu>
            analyzePolytope
        </submenu>
        <condition>
            built
        </condition>
        <rplots>
            plotPolytope2D(POLYTOPE, FLUX[YEAR]FLUX[YEAR])
        </rplots>
        <help>
            Plot the projection of the polytope on the plane defined by two dimensions.
        </help>
        <parameter>
            FLUX[YEAR]FLUX[YEAR]
        </parameter>
        <!--  CHECKED -->
    </rcommand>

    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            plotNetwork
        </name>
        <textmenu>
            Plot network
        </textmenu>
        <submenu>
            analyzePolytope
        </submenu>
        <condition>
            built
        </condition>
        <rplots>
            ggNetwork(POLYTOPE)
        </rplots>
        <help>
            This command gives the plot of the flow foodweb (package ggplot, ggraph)
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            diagnosticPolytope
        </name>
        <textmenu>
            Diagnostic polytope
        </textmenu>
        <submenu>
            analyzePolytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            status &lt;-  checkPolytopeStatus(POLYTOPE)
            resultR &lt;-  status
        </rcompute>
        <table>
            yes
        </table>
        <help>
             This commands checks that the polytope is bounded and not empty.
        </help>
        <!--  CHECKED -->
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            bounds
        </name>
        <textmenu>
            Bounds of polytope
        </textmenu>
        <submenu>
            analyzePolytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            bounds &lt;- getAllBoundsParam(POLYTOPE)
            resultR &lt;- bounds
        </rcompute>
        <table>
            yes
        </table>
        <help>
            This command allows to identify dimensions along wich polytope is not empty.
            If the polytope is not bounded, you should add additional constraints.
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            bound
        </name>
        <textmenu>
            Bound of polytope (one dimension)
        </textmenu>
        <submenu>
            analyzePolytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            bound &lt;- getBoundParam(POLYTOPE, p=FLUX[YEAR])
            resultR &lt;- bound
        </rcompute>
        <table>
            yes
        </table>
        <help>
            Since bounds function can be time consuming, we provide a version that focus on a parameter of interest, here for example the first parameter:
        </help>
        <parameter>
            FLUX[YEAR]
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            incompatible
        </name>
        <textmenu>
            Incompatible constraints
        </textmenu>
        <submenu>
            analyzePolytope
        </submenu>
        <condition>
            built
        </condition>
        <rcompute>
            incomp &lt;- findingIncompatibleConstr(POLYTOPE)
            resultR &lt;- incomp
        </rcompute>
        <table>
            yes
        </table>
        <help>
            This command allows finding incompatible constraints when the polytope is empty.
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            sample
        </name>
        <textmenu>
            Sample polytope
        </textmenu>
        <submenu>
            sample
        </submenu>
        <condition>
            built
        </condition>
        <conditioncontextchange>
            Polytope is sampled
        </conditioncontextchange>
        <contextchange>
            sampled
        </contextchange>
        <rcompute>
            SAMPLE &lt;- sampleCaN(POLYTOPE, SIZE, nchain = NCHAIN, ncore = 2, thin = THIN)
            resultR &lt;- 'Polytope is sampled'
        </rcompute>
        <help>
            This commands allows sampling the polytope.  The aim of this step is to achieve a uniform sampling within the convex poltyope. To do that, we use the routines from the former cpgsR package. Since the sampling is based on a mcmc algorithm, it can be a good idea to run several independent chains; the library allows you to run several chain in parallel using multicore facility provided by package parallel and doParallel. For example, here is the solution to run 2 chains in parrallel with 1000 samples in each chain:
            They are given by the user.
            Parameters are : SIZE, NCORE, NCHAIN, THIN.
            SIZE is the number of sampled trajectories.
            NCORE allows to use several cores in parallel, however the library ensure that the computation leave one core unused and that the number of cores remain smaller than the number of chains.
            NCHAIN is ...
            THIN ...
            This commands returns an object, named SAMPLE, that contains the model description and a  mcmc.list object so that we can use all the diagnostics tools provided in the package coda, such traceplot, summary or gelman and rubin tests or autocorrelograms.
            According to the number of trophic fluxes and the number of time steps, it may last a lot: some minutes, some tenths of minutes.
        </help>
        <parameter>
            SIZE
            NCHAIN
            THIN
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            gelmanDiag
        </name>
        <textmenu>
            Gelman diagnostic
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rcompute>
            gelman &lt;- gelman.diag(SAMPLE$mcmc[,FLUX[YEAR]])
            resultR &lt;- gelman
        </rcompute>
        <table>
            yes
        </table>
        <help>
            Gelman diagnostic for a given flux and a given year (package coda).
        </help>
        <parameter>
            <parameter>
                FLUX[YEAR]
            </parameter>
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            autocorrelationPlot
        </name>
        <textmenu>
            Plot autocorrelation of sample
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            acfplot(SAMPLE$mcmc[,FLUX[YEAR]])
        </rplots>
        <help>
            Plot autocorrelation in sample for a given flux and a given year (package coda).
        </help>
        <parameter>
            FLUX[YEAR]
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            sampleMultiple
        </name>
        <textmenu>
            Plot sample (several fluxes or components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSeries(SAMPLE, FLUXESCOMPONENTS,TRUE)
        </rplots>
        <help>
            Plot sample for several fluxes and components (package ggplot2)
        </help>
        <parameter>
            FLUXESCOMPONENTS
        </parameter>

    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            violinBiomassDistributions
        </name>
        <textmenu>
            Violin plots of biomass distributions
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <contextchange>
            plotsPrepared
        </contextchange>
        <rplots>
            ggViolin(SAMPLE, COMPONENTSYEAR,TRUE)
        </rplots>
        <help>
            Violin plots of biomass distributions (package ggplot2)
        </help>
        <parameter>
            COMPONENTSYEAR
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            ViolinFluxDistributions
        </name>
        <textmenu>
            Violin plots of flux distributions
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggViolin(SAMPLE, FLUXESYEAR,TRUE)
        </rplots>
        <help>
            Violin plots of flux distributions (package ggplot2)
        </help>
        <parameter>
            FLUXESYEAR
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            dietFractionsSC
        </name>
        <textmenu>
            Diet fractions (several components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggDiet(SAMPLE, COMPONENTS)
        </rplots>
        <help>
            A barplot of diet fractions (package ggplot2)
        </help>
        <parameter>
            COMPONENTS
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <name>
            growthRatesBiomassesTC
        </name>
        <textmenu>
            Growth / Biomasses (all components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggGrowth(SAMPLE)
        </rplots>
        <help>
            Plots biomass growth as a function of biomass. Provides a distribution over iterations and years (package ggplot2).
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <name>
            growthRatesBiomassesSC
        </name>
        <textmenu>
            Growth / Biomasses (several components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggGrowth(SAMPLE, COMPONENTS)
        </rplots>
        <help>
            Plots biomass growth as a function of biomass. Provides a distribution over iterations and years (package ggplot2).
        </help>
        <parameter>
            COMPONENTS
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <name>
            trophicFunctionalRelationshipsTC
        </name>
        <textmenu>
            Trophic functional relationships (all components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <contextchange>
            plotsPrepared
        </contextchange>
        <rplots>
            ggTrophicRelation(SAMPLE)
        </rplots>
        <help>
            Plots fluxes from prey to predators (package ggplot2).
        </help>
    </rcommand>    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand >
        <name>
            trophicFunctionalRelationshipsSC
        </name>
        <textmenu>
            Trophic functional relationships (several components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <contextchange>
            plotsPrepared
        </contextchange>
        <rplots>
            ggTrophicRelation(SAMPLE,COMPONENTS)
        </rplots>
        <help>
            Plots fluxes from prey to predators (package ggplot2).
        </help>
        <parameter>
            COMPONENTS
        </parameter>
    </rcommand>

    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            satiationTC
        </name>
        <textmenu>
            Satiation (all components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSatiation(SAMPLE)
        </rplots>
        <help>
            Plots incoming trophic fluxes versus biomass (package ggplot2).
         </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            satiationSC
        </name>
        <textmenu>
            Satiation (several components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSatiation(SAMPLE, COMPONENTS)
        </rplots>
        <help>
            Plots incoming trophic fluxes versus biomass (package ggplot2).
        </help>
        <parameter>
            COMPONENTS
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <!-- <rcommand>
        <name>
            bottleneck
        </name>
        <textmenu>
            Bottleneck (all components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggBottleneck(SAMPLE)
        </rplots>
        <help>
            Displays whether species were closed to satiation or if their predators were closed to inertia (package ggplot2).
        </help>
      </rcommand>
      -->
    <!--  +++++++++++++++++++++++++++++ -->
    <!-- <rcommand>
        <name>
            bottleneck
        </name>
        <textmenu>
            Bottleneck (several components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggBottleneck(SAMPLE, COMPONENTS)
        </rplots>
        <help>
            Displays whether species were closed to satiation or if their predators were closed to inertia (package ggplot2).
      </help>
        <parameter>
            COMPONENTS
        </parameter>
    </rcommand>
    -->
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            satiatInertia
        </name>
        <textmenu>
            Satiation/Inertia (all components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSatiatInertia(SAMPLE)
        </rplots>
        <help>
            Displays whether species were closed to satiation or inertia bounds (package ggplot2).
        </help>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            satiatInertiaSC
        </name>
        <textmenu>
            Satiation/Inertia (several components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggSatiatInertia(SAMPLE, COMPONENTS)
        </rplots>
        <help>
            Displays whether species were closed to satiation or inertia bounds (package ggplot2).
        </help>
        <parameter>
            COMPONENTS
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            pairsBiomassTC
        </name>
        <textmenu>
            Pairs of biomass (all components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggPairsBiomass(SAMPLE)
        </rplots>
        <help>
            Plots pairs plot of biomass among species and provided Kendall correlation tau (package ggplot2).
        </help>
     </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            pairsBiomass
        </name>
        <textmenu>
            Pairs of biomass (several components)
        </textmenu>
        <submenu>
            analyzeSample
        </submenu>
        <condition>
            sampled
        </condition>
        <rplots>
            ggPairsBiomass(SAMPLE, COMPONENTS)
        </rplots>
        <help>
            Plots pairs plot of biomass among species and provided Kendall correlation tau (package ggplot2).
        </help>
        <parameter>
            COMPONENTS
        </parameter>
    </rcommand>    <!--  +++++++++++++++++++++++++++++ -->
    <rcommand>
        <name>
            experimentA
        </name>
        <textmenu>
            experiment
        </textmenu>
        <submenu>
            experiment
        </submenu>
        <condition>
            connected
        </condition>
        <contextchange>
            sampled
        </contextchange>
        <rcompute>
            POLYTOPE &lt;- buildCaN('FILENAME')
            SAMPLE &lt;- sampleCaN(POLYTOPE, SIZE, nchain = NCHAIN, ncore = 2, thin = THIN)
            setEPS()
            cT &lt;- now()
            fileName &lt;- paste("Exp", year(cT), month(cT), day(cT), hour(cT), "Series", ".eps", sep ="-")
            postscript(fileName)
            ggSeries(SAMPLE, ALLCOMPONENTS,TRUE)
            dev.off()
            resultR &lt;- 'End of experiment A'
        </rcompute>
         <help>
             A standard run. Be patient.
        </help>
        <parameter>
            ALLCOMPONENTS
        </parameter>
    </rcommand>
    <!--  +++++++++++++++++++++++++++++ -->
</rcommands>
